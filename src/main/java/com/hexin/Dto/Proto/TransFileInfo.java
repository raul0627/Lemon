// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TransFile.proto

package com.hexin.Dto.Proto;

public final class TransFileInfo {
  private TransFileInfo() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface FileInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:FileInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 fileCount = 1;</code>
     *
     * <pre>
     * 文件数量
     * </pre>
     */
    boolean hasFileCount();
    /**
     * <code>required int32 fileCount = 1;</code>
     *
     * <pre>
     * 文件数量
     * </pre>
     */
    int getFileCount();

    /**
     * <code>repeated .FileInfo.FileCell cell = 2;</code>
     *
     * <pre>
     * 动态文件单元
     * </pre>
     */
    java.util.List<com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell> 
        getCellList();
    /**
     * <code>repeated .FileInfo.FileCell cell = 2;</code>
     *
     * <pre>
     * 动态文件单元
     * </pre>
     */
    com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell getCell(int index);
    /**
     * <code>repeated .FileInfo.FileCell cell = 2;</code>
     *
     * <pre>
     * 动态文件单元
     * </pre>
     */
    int getCellCount();
    /**
     * <code>repeated .FileInfo.FileCell cell = 2;</code>
     *
     * <pre>
     * 动态文件单元
     * </pre>
     */
    java.util.List<? extends com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCellOrBuilder> 
        getCellOrBuilderList();
    /**
     * <code>repeated .FileInfo.FileCell cell = 2;</code>
     *
     * <pre>
     * 动态文件单元
     * </pre>
     */
    com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCellOrBuilder getCellOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code FileInfo}
   */
  public static final class FileInfo extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:FileInfo)
      FileInfoOrBuilder {
    // Use FileInfo.newBuilder() to construct.
    private FileInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FileInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FileInfo defaultInstance;
    public static FileInfo getDefaultInstance() {
      return defaultInstance;
    }

    public FileInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FileInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              fileCount_ = input.readInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                cell_ = new java.util.ArrayList<com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell>();
                mutable_bitField0_ |= 0x00000002;
              }
              cell_.add(input.readMessage(com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          cell_ = java.util.Collections.unmodifiableList(cell_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.hexin.Dto.Proto.TransFileInfo.internal_static_FileInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.hexin.Dto.Proto.TransFileInfo.internal_static_FileInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.hexin.Dto.Proto.TransFileInfo.FileInfo.class, com.hexin.Dto.Proto.TransFileInfo.FileInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<FileInfo> PARSER =
        new com.google.protobuf.AbstractParser<FileInfo>() {
      public FileInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FileInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FileInfo> getParserForType() {
      return PARSER;
    }

    public interface FileCellOrBuilder extends
        // @@protoc_insertion_point(interface_extends:FileInfo.FileCell)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * 文件名
       * </pre>
       */
      boolean hasName();
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * 文件名
       * </pre>
       */
      java.lang.String getName();
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * 文件名
       * </pre>
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <code>required int64 length = 2;</code>
       *
       * <pre>
       * 文件长度
       * </pre>
       */
      boolean hasLength();
      /**
       * <code>required int64 length = 2;</code>
       *
       * <pre>
       * 文件长度
       * </pre>
       */
      long getLength();
    }
    /**
     * Protobuf type {@code FileInfo.FileCell}
     *
     * <pre>
     * 文件单元
     * </pre>
     */
    public static final class FileCell extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:FileInfo.FileCell)
        FileCellOrBuilder {
      // Use FileCell.newBuilder() to construct.
      private FileCell(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private FileCell(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final FileCell defaultInstance;
      public static FileCell getDefaultInstance() {
        return defaultInstance;
      }

      public FileCell getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private FileCell(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000001;
                name_ = bs;
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                length_ = input.readInt64();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.hexin.Dto.Proto.TransFileInfo.internal_static_FileInfo_FileCell_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.hexin.Dto.Proto.TransFileInfo.internal_static_FileInfo_FileCell_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.class, com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.Builder.class);
      }

      public static com.google.protobuf.Parser<FileCell> PARSER =
          new com.google.protobuf.AbstractParser<FileCell>() {
        public FileCell parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new FileCell(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<FileCell> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      public static final int NAME_FIELD_NUMBER = 1;
      private java.lang.Object name_;
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * 文件名
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * 文件名
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        }
      }
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * 文件名
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int LENGTH_FIELD_NUMBER = 2;
      private long length_;
      /**
       * <code>required int64 length = 2;</code>
       *
       * <pre>
       * 文件长度
       * </pre>
       */
      public boolean hasLength() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int64 length = 2;</code>
       *
       * <pre>
       * 文件长度
       * </pre>
       */
      public long getLength() {
        return length_;
      }

      private void initFields() {
        name_ = "";
        length_ = 0L;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasName()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasLength()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getNameBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt64(2, length_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getNameBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(2, length_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code FileInfo.FileCell}
       *
       * <pre>
       * 文件单元
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:FileInfo.FileCell)
          com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCellOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.hexin.Dto.Proto.TransFileInfo.internal_static_FileInfo_FileCell_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.hexin.Dto.Proto.TransFileInfo.internal_static_FileInfo_FileCell_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.class, com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.Builder.class);
        }

        // Construct using com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          name_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          length_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.hexin.Dto.Proto.TransFileInfo.internal_static_FileInfo_FileCell_descriptor;
        }

        public com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell getDefaultInstanceForType() {
          return com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.getDefaultInstance();
        }

        public com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell build() {
          com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell buildPartial() {
          com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell result = new com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.name_ = name_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.length_ = length_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell) {
            return mergeFrom((com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell other) {
          if (other == com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.getDefaultInstance()) return this;
          if (other.hasName()) {
            bitField0_ |= 0x00000001;
            name_ = other.name_;
            onChanged();
          }
          if (other.hasLength()) {
            setLength(other.getLength());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasName()) {
            
            return false;
          }
          if (!hasLength()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object name_ = "";
        /**
         * <code>required string name = 1;</code>
         *
         * <pre>
         * 文件名
         * </pre>
         */
        public boolean hasName() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required string name = 1;</code>
         *
         * <pre>
         * 文件名
         * </pre>
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              name_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>required string name = 1;</code>
         *
         * <pre>
         * 文件名
         * </pre>
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>required string name = 1;</code>
         *
         * <pre>
         * 文件名
         * </pre>
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          name_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required string name = 1;</code>
         *
         * <pre>
         * 文件名
         * </pre>
         */
        public Builder clearName() {
          bitField0_ = (bitField0_ & ~0x00000001);
          name_ = getDefaultInstance().getName();
          onChanged();
          return this;
        }
        /**
         * <code>required string name = 1;</code>
         *
         * <pre>
         * 文件名
         * </pre>
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          name_ = value;
          onChanged();
          return this;
        }

        private long length_ ;
        /**
         * <code>required int64 length = 2;</code>
         *
         * <pre>
         * 文件长度
         * </pre>
         */
        public boolean hasLength() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required int64 length = 2;</code>
         *
         * <pre>
         * 文件长度
         * </pre>
         */
        public long getLength() {
          return length_;
        }
        /**
         * <code>required int64 length = 2;</code>
         *
         * <pre>
         * 文件长度
         * </pre>
         */
        public Builder setLength(long value) {
          bitField0_ |= 0x00000002;
          length_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int64 length = 2;</code>
         *
         * <pre>
         * 文件长度
         * </pre>
         */
        public Builder clearLength() {
          bitField0_ = (bitField0_ & ~0x00000002);
          length_ = 0L;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:FileInfo.FileCell)
      }

      static {
        defaultInstance = new FileCell(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:FileInfo.FileCell)
    }

    private int bitField0_;
    public static final int FILECOUNT_FIELD_NUMBER = 1;
    private int fileCount_;
    /**
     * <code>required int32 fileCount = 1;</code>
     *
     * <pre>
     * 文件数量
     * </pre>
     */
    public boolean hasFileCount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 fileCount = 1;</code>
     *
     * <pre>
     * 文件数量
     * </pre>
     */
    public int getFileCount() {
      return fileCount_;
    }

    public static final int CELL_FIELD_NUMBER = 2;
    private java.util.List<com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell> cell_;
    /**
     * <code>repeated .FileInfo.FileCell cell = 2;</code>
     *
     * <pre>
     * 动态文件单元
     * </pre>
     */
    public java.util.List<com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell> getCellList() {
      return cell_;
    }
    /**
     * <code>repeated .FileInfo.FileCell cell = 2;</code>
     *
     * <pre>
     * 动态文件单元
     * </pre>
     */
    public java.util.List<? extends com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCellOrBuilder> 
        getCellOrBuilderList() {
      return cell_;
    }
    /**
     * <code>repeated .FileInfo.FileCell cell = 2;</code>
     *
     * <pre>
     * 动态文件单元
     * </pre>
     */
    public int getCellCount() {
      return cell_.size();
    }
    /**
     * <code>repeated .FileInfo.FileCell cell = 2;</code>
     *
     * <pre>
     * 动态文件单元
     * </pre>
     */
    public com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell getCell(int index) {
      return cell_.get(index);
    }
    /**
     * <code>repeated .FileInfo.FileCell cell = 2;</code>
     *
     * <pre>
     * 动态文件单元
     * </pre>
     */
    public com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCellOrBuilder getCellOrBuilder(
        int index) {
      return cell_.get(index);
    }

    private void initFields() {
      fileCount_ = 0;
      cell_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasFileCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getCellCount(); i++) {
        if (!getCell(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, fileCount_);
      }
      for (int i = 0; i < cell_.size(); i++) {
        output.writeMessage(2, cell_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, fileCount_);
      }
      for (int i = 0; i < cell_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cell_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.hexin.Dto.Proto.TransFileInfo.FileInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.hexin.Dto.Proto.TransFileInfo.FileInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.hexin.Dto.Proto.TransFileInfo.FileInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.hexin.Dto.Proto.TransFileInfo.FileInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.hexin.Dto.Proto.TransFileInfo.FileInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.hexin.Dto.Proto.TransFileInfo.FileInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.hexin.Dto.Proto.TransFileInfo.FileInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.hexin.Dto.Proto.TransFileInfo.FileInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.hexin.Dto.Proto.TransFileInfo.FileInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.hexin.Dto.Proto.TransFileInfo.FileInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.hexin.Dto.Proto.TransFileInfo.FileInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code FileInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:FileInfo)
        com.hexin.Dto.Proto.TransFileInfo.FileInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.hexin.Dto.Proto.TransFileInfo.internal_static_FileInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.hexin.Dto.Proto.TransFileInfo.internal_static_FileInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.hexin.Dto.Proto.TransFileInfo.FileInfo.class, com.hexin.Dto.Proto.TransFileInfo.FileInfo.Builder.class);
      }

      // Construct using com.hexin.Dto.Proto.TransFileInfo.FileInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCellFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        fileCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (cellBuilder_ == null) {
          cell_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          cellBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.hexin.Dto.Proto.TransFileInfo.internal_static_FileInfo_descriptor;
      }

      public com.hexin.Dto.Proto.TransFileInfo.FileInfo getDefaultInstanceForType() {
        return com.hexin.Dto.Proto.TransFileInfo.FileInfo.getDefaultInstance();
      }

      public com.hexin.Dto.Proto.TransFileInfo.FileInfo build() {
        com.hexin.Dto.Proto.TransFileInfo.FileInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.hexin.Dto.Proto.TransFileInfo.FileInfo buildPartial() {
        com.hexin.Dto.Proto.TransFileInfo.FileInfo result = new com.hexin.Dto.Proto.TransFileInfo.FileInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.fileCount_ = fileCount_;
        if (cellBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cell_ = java.util.Collections.unmodifiableList(cell_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cell_ = cell_;
        } else {
          result.cell_ = cellBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.hexin.Dto.Proto.TransFileInfo.FileInfo) {
          return mergeFrom((com.hexin.Dto.Proto.TransFileInfo.FileInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.hexin.Dto.Proto.TransFileInfo.FileInfo other) {
        if (other == com.hexin.Dto.Proto.TransFileInfo.FileInfo.getDefaultInstance()) return this;
        if (other.hasFileCount()) {
          setFileCount(other.getFileCount());
        }
        if (cellBuilder_ == null) {
          if (!other.cell_.isEmpty()) {
            if (cell_.isEmpty()) {
              cell_ = other.cell_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCellIsMutable();
              cell_.addAll(other.cell_);
            }
            onChanged();
          }
        } else {
          if (!other.cell_.isEmpty()) {
            if (cellBuilder_.isEmpty()) {
              cellBuilder_.dispose();
              cellBuilder_ = null;
              cell_ = other.cell_;
              bitField0_ = (bitField0_ & ~0x00000002);
              cellBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCellFieldBuilder() : null;
            } else {
              cellBuilder_.addAllMessages(other.cell_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasFileCount()) {
          
          return false;
        }
        for (int i = 0; i < getCellCount(); i++) {
          if (!getCell(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.hexin.Dto.Proto.TransFileInfo.FileInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.hexin.Dto.Proto.TransFileInfo.FileInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int fileCount_ ;
      /**
       * <code>required int32 fileCount = 1;</code>
       *
       * <pre>
       * 文件数量
       * </pre>
       */
      public boolean hasFileCount() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 fileCount = 1;</code>
       *
       * <pre>
       * 文件数量
       * </pre>
       */
      public int getFileCount() {
        return fileCount_;
      }
      /**
       * <code>required int32 fileCount = 1;</code>
       *
       * <pre>
       * 文件数量
       * </pre>
       */
      public Builder setFileCount(int value) {
        bitField0_ |= 0x00000001;
        fileCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 fileCount = 1;</code>
       *
       * <pre>
       * 文件数量
       * </pre>
       */
      public Builder clearFileCount() {
        bitField0_ = (bitField0_ & ~0x00000001);
        fileCount_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell> cell_ =
        java.util.Collections.emptyList();
      private void ensureCellIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          cell_ = new java.util.ArrayList<com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell>(cell_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell, com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.Builder, com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCellOrBuilder> cellBuilder_;

      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public java.util.List<com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell> getCellList() {
        if (cellBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cell_);
        } else {
          return cellBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public int getCellCount() {
        if (cellBuilder_ == null) {
          return cell_.size();
        } else {
          return cellBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell getCell(int index) {
        if (cellBuilder_ == null) {
          return cell_.get(index);
        } else {
          return cellBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public Builder setCell(
          int index, com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell value) {
        if (cellBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCellIsMutable();
          cell_.set(index, value);
          onChanged();
        } else {
          cellBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public Builder setCell(
          int index, com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.Builder builderForValue) {
        if (cellBuilder_ == null) {
          ensureCellIsMutable();
          cell_.set(index, builderForValue.build());
          onChanged();
        } else {
          cellBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public Builder addCell(com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell value) {
        if (cellBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCellIsMutable();
          cell_.add(value);
          onChanged();
        } else {
          cellBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public Builder addCell(
          int index, com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell value) {
        if (cellBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCellIsMutable();
          cell_.add(index, value);
          onChanged();
        } else {
          cellBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public Builder addCell(
          com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.Builder builderForValue) {
        if (cellBuilder_ == null) {
          ensureCellIsMutable();
          cell_.add(builderForValue.build());
          onChanged();
        } else {
          cellBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public Builder addCell(
          int index, com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.Builder builderForValue) {
        if (cellBuilder_ == null) {
          ensureCellIsMutable();
          cell_.add(index, builderForValue.build());
          onChanged();
        } else {
          cellBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public Builder addAllCell(
          java.lang.Iterable<? extends com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell> values) {
        if (cellBuilder_ == null) {
          ensureCellIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, cell_);
          onChanged();
        } else {
          cellBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public Builder clearCell() {
        if (cellBuilder_ == null) {
          cell_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          cellBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public Builder removeCell(int index) {
        if (cellBuilder_ == null) {
          ensureCellIsMutable();
          cell_.remove(index);
          onChanged();
        } else {
          cellBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.Builder getCellBuilder(
          int index) {
        return getCellFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCellOrBuilder getCellOrBuilder(
          int index) {
        if (cellBuilder_ == null) {
          return cell_.get(index);  } else {
          return cellBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public java.util.List<? extends com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCellOrBuilder> 
           getCellOrBuilderList() {
        if (cellBuilder_ != null) {
          return cellBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cell_);
        }
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.Builder addCellBuilder() {
        return getCellFieldBuilder().addBuilder(
            com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.getDefaultInstance());
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.Builder addCellBuilder(
          int index) {
        return getCellFieldBuilder().addBuilder(
            index, com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.getDefaultInstance());
      }
      /**
       * <code>repeated .FileInfo.FileCell cell = 2;</code>
       *
       * <pre>
       * 动态文件单元
       * </pre>
       */
      public java.util.List<com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.Builder> 
           getCellBuilderList() {
        return getCellFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell, com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.Builder, com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCellOrBuilder> 
          getCellFieldBuilder() {
        if (cellBuilder_ == null) {
          cellBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell, com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCell.Builder, com.hexin.Dto.Proto.TransFileInfo.FileInfo.FileCellOrBuilder>(
                  cell_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          cell_ = null;
        }
        return cellBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:FileInfo)
    }

    static {
      defaultInstance = new FileInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:FileInfo)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_FileInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_FileInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_FileInfo_FileCell_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_FileInfo_FileCell_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017TransFile.proto\"i\n\010FileInfo\022\021\n\tfileCou" +
      "nt\030\001 \002(\005\022 \n\004cell\030\002 \003(\0132\022.FileInfo.FileCe" +
      "ll\032(\n\010FileCell\022\014\n\004name\030\001 \002(\t\022\016\n\006length\030\002" +
      " \002(\003B$\n\023com.hexin.Dto.ProtoB\rTransFileIn" +
      "fo"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_FileInfo_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_FileInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_FileInfo_descriptor,
        new java.lang.String[] { "FileCount", "Cell", });
    internal_static_FileInfo_FileCell_descriptor =
      internal_static_FileInfo_descriptor.getNestedTypes().get(0);
    internal_static_FileInfo_FileCell_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_FileInfo_FileCell_descriptor,
        new java.lang.String[] { "Name", "Length", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
