package com.hexin.Util;

/**
 * Created by Raul on 2016/6/21.
 */
public class Native2Ascii {
    private static final String PREFIX = "\\u";

    /**
     * @param args
     */
    public static void main(String[] args) throws Exception {
        String str = "Welcome!我的朋友.";
        String ascii = native2ascii(str);
//        String ascii = "[[\"600000\", \"\\u6d66\\u53d1\\u94f6\\u884c\", {\"\\u5206\\u7ea2\": {\"comment\": \"\\u8be5\\u516c\\u53f8\\u6bcf\\u80a1\\u8d44\\u672c\\u516c\\u79ef\\u91d1\\u8f83\\u591a\\uff0c\\u6bcf\\u80a1\\u80a1\\u5229\\u8f83\\u4e3a\\u4e30\\u539a\\uff0c\\u8868\\u660e\\u516c\\u53f8\\u7ecf\\u8425\\u6548\\u76ca\\u8f83\\u597d\\uff0c\\u8d44\\u672c\\u79ef\\u7d2f\\u9ad8\\uff0c\\u4e14\\u6ce8\\u91cd\\u6295\\u8d44\\u8005\\u56de\\u62a5\\u3002\\u8f83\\u9ad8\\u7684\\u6bcf\\u80a1\\u8d44\\u672c\\u516c\\u79ef\\u91d1\\u662f\\u5206\\u7ea2\\u9001\\u8f6c\\u7684\\u57fa\\u7840\\uff0c\\u8bf4\\u660e\\u8be5\\u80a1\\u5177\\u5907\\u9ad8\\u9001\\u8f6c\\u6f5c\\u529b\\u3002\\u6295\\u987e\\u5efa\\u8bae\\uff1a\\u4e2d\\u957f\\u7ebf\\u6295\\u8d44\\u8005\\u5bf9\\u8be5\\u80a1\\u540e\\u5e02\\u53ef\\u62b1\\u4e50\\u89c2\\u6001\\u5ea6\\u3002\", \"logicTheory\": \"\\u9ad8\\u6bcf\\u80a1\\u8d44\\u672c\\u516c\\u79ef\\u91d1\\u662f\\u5206\\u7ea2\\u8f6c\\u589e\\u7684\\u57fa\\u7840\\u3002\\u76f8\\u5bf9\\u80a1\\u4ef7\\u800c\\u8a00\\uff0c\\u516c\\u53f8\\u6548\\u76ca\\u597d\\u3001\\u8d44\\u672c\\u79ef\\u7d2f\\u9ad8\\uff0c\\u5e76\\u4e14\\u6ce8\\u91cd\\u6295\\u8d44\\u8005\\u56de\\u62a5\\u3002\\n\"}, \"\\u5229\\u597d\\u5229\\u7a7a\": {\"comment\": \"\\u8be5\\u80a1\\u4eca\\u65e5\\u5f3a\\u52bf\\u7a81\\u78345\\u65e5\\u5747\\u7ebf\\uff0c\\u8d70\\u52bf\\u8f6c\\u5f3a\\uff0c\\u800c\\u4e00\\u6bb5\\u597d\\u7684\\u5347\\u52bf\\u5f80\\u5f80\\u4f1a\\u6cbf5\\u65e5\\u5747\\u7ebf\\u8fd0\\u884c\\u3002\\u8be5\\u80a1\\u5f53\\u524d\\u5b58\\u5728\\u5229\\u597d\\u6d88\\u606f\\u523a\\u6fc0\\uff0c\\u4e0d\\u6392\\u9664\\u4e3b\\u529b\\u501f\\u673a\\u62c9\\u5347\\u7684\\u53ef\\u80fd\\uff1b\\u6295\\u987e\\u5efa\\u8bae\\uff1a\\u6295\\u8d44\\u8005\\u5bf9\\u8be5\\u80a1\\u77ed\\u671f\\u8d70\\u52bf\\u53ef\\u6301\\u4e50\\u89c2\\u6001\\u5ea6\\u3002\", \"logicTheory\": \"\\u4e3b\\u529b\\u4e00\\u822c\\u901a\\u8fc7\\u9707\\u8361\\u6574\\u7406\\u5e73\\u53f0\\u5438\\u6536\\u7b79\\u7801\\uff0c\\u5f53\\u96c6\\u4e2d\\u4e00\\u5b9a\\u7684\\u7b79\\u7801\\u65f6\\uff0c\\u5f80\\u5f80\\u9009\\u62e9\\u5f62\\u6001\\u7a81\\u7834\\u62c9\\u5347\\u4e00\\u6ce2\\u884c\\u60c5\\uff0c\\u800c\\u5f62\\u6001\\u7a81\\u7834\\u7684\\u50ac\\u5316\\u5242\\u662f\\u516c\\u53f8\\u5229\\u597d\\u65b0\\u95fb\\uff0c\\u4e0a\\u5e02\\u516c\\u53f8\\u914d\\u5408\\u673a\\u6784\\u505a\\u5e02\\u503c\\u7ba1\\u7406\\u5df2\\u4e0d\\u662f\\u9633\\u5149\\u4e0b\\u7684\\u65b0\\u9c9c\\u4e8b\\uff0c\\u6240\\u4ee5\\uff0c\\u9009\\u62e9\\u6709\\u5229\\u597d\\u652f\\u6491\\u4e0b\\u7684\\u5f62\\u6001\\u7a81\\u7834\\u80a1\\uff0c\\u5f80\\u5f80\\u6709\\u4e0d\\u9519\\u7684\\u6536\\u76ca\\u3002\\n\"}, \"\\u5e02\\u76c8\\u7387\\u4f30\\u503c\": {\"comment\": \"\\u8be5\\u80a1\\u5f53\\u671f\\u62a5\\u544a\\u663e\\u793a\\uff0c\\u516c\\u53f8\\u8425\\u4e1a\\u6536\\u5165\\u540c\\u6bd4\\u51fa\\u73b0\\u589e\\u957f\\uff0c\\u800c\\u9500\\u552e\\u8d39\\u7528\\u540c\\u6bd4\\u51cf\\u5c11\\uff0c\\u8868\\u660e\\u516c\\u53f8\\u7ecf\\u8425\\u72b6\\u51b5\\u826f\\u597d\\u3002\\u76ee\\u524d\\u52a8\\u6001\\u5e02\\u76c8\\u7387\\u5c0f\\u4e8e\\u9759\\u6001\\u5e02\\u76c8\\u7387\\uff0c\\u8868\\u660e\\u516c\\u53f8\\u76c8\\u5229\\u72b6\\u51b5\\u8f83\\u597d\\uff0c\\u4f30\\u503c\\u7a7a\\u95f4\\u6709\\u6240\\u63d0\\u5347\\u3002\\u6295\\u987e\\u5efa\\u8bae\\uff1a\\u4e2d\\u957f\\u7ebf\\u6295\\u8d44\\u8005\\u5bf9\\u8be5\\u80a1\\u540e\\u671f\\u8d70\\u52bf\\u53ef\\u6301\\u4e50\\u89c2\\u6001\\u5ea6\\u3002\", \"logicTheory\": \"\\u6295\\u8d44\\u8005\\u6839\\u636e\\u6700\\u65b0\\u7684\\u76c8\\u5229\\u8868\\u73b0\\u5224\\u65ad\\u5168\\u5e74\\u6536\\u76ca\\u597d\\u4e8e\\u53bb\\u5e74\\uff0c\\u800c\\u4e14\\u8f83\\u4f4e\\u7684\\u6362\\u624b\\u7387\\u8bf4\\u660e\\u6b64\\u7c7b\\u80a1\\u7968\\u6295\\u8d44\\u8005\\u6bd4\\u8f83\\u7a33\\u5b9a\\uff0c\\u4ef7\\u503c\\u6295\\u8d44\\u8005\\u8f83\\u591a\\u3002\\u9500\\u552e\\u8d39\\u7528\\u7684\\u964d\\u4f4e\\u4e0e\\u8425\\u4e1a\\u6536\\u5165\\u7684\\u589e\\u957f\\u5219\\u589e\\u5f3a\\u4e86\\u6295\\u8d44\\u8005\\u5bf9\\u4e1a\\u7ee9\\u5224\\u65ad\\u7684\\u51c6\\u786e\\u6027\\u3002\\u968f\\u7740\\u4e1a\\u7ee9\\u7684\\u786e\\u8ba4\\uff0c\\u4e2a\\u80a1\\u7684\\u4ef7\\u503c\\u5f00\\u59cb\\u663e\\u5316\\uff0c\\u80a1\\u4ef7\\u4e0a\\u6da8\\u662f\\u5927\\u6982\\u7387\\u4e8b\\u4ef6\\u3002\"}, \"\\u884c\\u4e1a\\u5468\\u671f\": {\"comment\": \"\\u8be5\\u80a1\\u6240\\u5c5e\\u884c\\u4e1a\\u5f53\\u524d\\u6536\\u76ca\\u6c34\\u5e73\\u7565\\u9ad8\\u4e8e\\u5386\\u53f2\\u5e73\\u5747\\uff0c\\u8868\\u660e\\u8be5\\u884c\\u4e1a\\u6574\\u4f53\\u76c8\\u5229\\u80fd\\u529b\\u6709\\u6240\\u63d0\\u9ad8\\u3002\\u4e0e\\u6b64\\u540c\\u65f6\\uff0c\\u884c\\u4e1a\\u4f30\\u503c\\u6c34\\u5e73\\u5904\\u4e8e\\u5386\\u53f2\\u4f4e\\u4f4d\\uff0c\\u5b89\\u5168\\u8fb9\\u9645\\u8f83\\u9ad8\\u3002\\u968f\\u7740\\u76c8\\u5229\\u80fd\\u529b\\u7684\\u63d0\\u5347\\uff0c\\u884c\\u4e1a\\u4f30\\u503c\\u6c34\\u5e73\\u4e5f\\u5c06\\u5411\\u5408\\u7406\\u6c34\\u5e73\\u56de\\u5f52\\u3002\\u6295\\u987e\\u5efa\\u8bae\\uff1a\\u4e2d\\u957f\\u7ebf\\u6295\\u8d44\\u8005\\u5bf9\\u8be5\\u80a1\\u540e\\u5e02\\u53ef\\u9002\\u5f53\\u6301\\u4e50\\u89c2\\u6001\\u5ea6\\u3002\", \"logicTheory\": \"\\u884c\\u4e1a\\u6536\\u76ca\\u6c34\\u5e73\\u4e3a\\u7565\\u9ad8\\u7387\\u5386\\u53f2\\u5e73\\u5747\\u8bf4\\u660e\\u884c\\u4e1a\\u76ee\\u524d\\u884c\\u4e1a\\u76c8\\u5229\\u80fd\\u529b\\u6709\\u6240\\u63d0\\u9ad8\\uff0c\\u884c\\u4e1a\\u4f30\\u503c\\u6c34\\u5e73\\u4e3a\\u5386\\u53f2\\u8f83\\u4f4e\\u4f4d\\u8bf4\\u660e\\u6b64\\u65f6\\u884c\\u4e1a\\u6574\\u4f53\\u4ef7\\u503c\\u88ab\\u5e02\\u573a\\u4f4e\\u4f30\\uff0c\\u76c8\\u5229\\u80fd\\u529b\\u63d0\\u9ad8\\uff0c\\u5728\\u4ef7\\u503c\\u88ab\\u4f4e\\u4f30\\u7684\\u60c5\\u51b5\\u4e0b\\u80a1\\u4ef7\\u4e0a\\u6da8\\u7684\\u6982\\u7387\\u8f83\\u5927\\uff0c\\u6da8\\u5e45\\u4e5f\\u8f83\\u5927\\u3002\"}, \"\\u4e3b\\u529b\\u52a8\\u5411\": {\"comment\": \"\\u76ee\\u524d\\u8be5\\u80a160\\u65e5\\u5747\\u7ebf\\u5904\\u4e8e\\u4e0b\\u884c\\u8d70\\u52bf\\uff0c\\u4e2d\\u671f\\u8d8b\\u52bf\\u504f\\u5f31\\u3002\\u4eca\\u65e5DDE\\u5927\\u5355\\u51c0\\u989d\\u4e3a\\u6b63\\uff0c\\u8868\\u660e\\u8d44\\u91d1\\u5728\\u6d41\\u5165\\u3002\\u8be5\\u80a1\\u5728\\u7ecf\\u8fc7\\u524d\\u671f\\u7684\\u4e0b\\u8dcc\\u4e4b\\u540e\\uff0c\\u505a\\u7a7a\\u52a8\\u80fd\\u5df2\\u5f97\\u5230\\u5927\\u5e45\\u91ca\\u653e\\uff0c\\u8d44\\u91d1\\u6d41\\u5165\\u6709\\u5229\\u4e8e\\u77ed\\u671f\\u80a1\\u4ef7\\u8d70\\u597d\\uff1b\\u6295\\u987e\\u5efa\\u8bae\\uff1a\\u6295\\u8d44\\u8005\\u5bf9\\u8be5\\u80a1\\u8fd1\\u671f\\u8d70\\u52bf\\u53ef\\u62b1\\u4e50\\u89c2\\u6001\\u5ea6\\u3002\", \"logicTheory\": \"\\u80a1\\u4ef7\\u7ecf\\u8fc7\\u4e00\\u6bb5\\u65f6\\u95f4\\u7684\\u4e0b\\u8dcc\\uff0c60\\u65e5\\u5747\\u7ebf\\u4f1a\\u4e0b\\u79fb\\uff0c\\u6b64\\u65f6\\u6709\\u4e3b\\u529b\\u8d44\\u91d1\\u7684\\u4ecb\\u5165\\uff0c\\u540c\\u65f6\\u6709\\u5927\\u5355\\u51fa\\u73b0\\uff0c\\u4ea4\\u6613\\u5f00\\u59cb\\u6d3b\\u8dc3\\uff0c\\u80a1\\u4ef7\\u6709\\u53ef\\u80fd\\u5f00\\u59cb\\u56de\\u5347\\u3002\"}}]]";
        System.out.println("ascii->\n" + ascii);
        //
        String data = ascii2native(ascii);
        System.out.println("native->\n" + data);
    }

    /**
     * native2ascii
     *
     * @param text
     * @return
     */
    public static String native2ascii(String text) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < text.length(); i++) {
            char ch = text.charAt(i);
            String ascii = char2ascii(ch);
            sb.append(ascii);
        }
        return sb.toString();
    }

    /**
     * char -> ascii
     *
     * @param ch
     * @return
     */
    private static String char2ascii(char ch) {
        if (ch < 256) {
            return Character.toString(ch);
        }
        String hex = Integer.toHexString(ch);
        if (hex.length() < 4) {
            hex = "0" + hex;
        }
        return PREFIX + hex;
    }

    /**
     * native2ascii
     *
     * @param text 内容
     * @return 可读内容
     */
    public static String ascii2native(String text) {
        StringBuilder sb = new StringBuilder();
        int start = 0;
        int idx = text.indexOf(PREFIX);
        while (idx != -1) {
            // 上一个 Unicode 码与当前 Unicode 码之间的有效字符
            // eg: \u0101ABC\u0102 之间的ABC
            sb.append(text.substring(start, idx));
            // 转换当前 Unicode 码
            String ascii = text.substring(idx + 2, idx + 6);
            char ch = (char) Integer.parseInt(ascii, 16);
            sb.append(ch);
            // 查找下一个 Unicode
            start = idx + 6;
            idx = text.indexOf(PREFIX, start);
        }
        // 结尾的有效字符
        sb.append(text.substring(start));
        return sb.toString();
    }
}
